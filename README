This repository contains the work of a senior design project.
The main focus is on task and motion planning based on Signal Temporal
Logic Constraints. 

The bulk of the code is the file: STLpredicate.py, which consists of two big pieces.
1) This is the STLpredicate class which implements, traditional STL robustness along with a few
other optimization techniques. 
2) A "main" function that pulls from the STLpredicate class to execute a variety of demos. 

How does STLpredicate.py work?
It is contains three main pieces. First are constructor functions that create and combine
STLpredicate objects into a specification. I overwrote the * and + operators for convenience in
this aspect. 
The next piece is robustness fucntions. They work together to recursively determine the
robustness of a particular trajectory with respect to a particular predicate. Since often there
are dynamic constraints that must be computed from the control trajectory the robustness
computation also uses a plant to generate the additional signal trajectories. Currently the
plant is set to have differential drive dynamics to mimic a TurtleBot Burger. 
The last piece is optimization and result logging functions. These simply take a predicate
generate some initial trajectories and optimize to try and find the best result. The logging
and plotting functions do as you would expect. 

How to simulate the results in Gazebo?
For a simple predicate, I made a world, a node and a launch file. The process works in two
steps. First you run STLpredicate.py to generate a good solution. This is saved in a file
called sln.txt. Next you run the roslaunch file to open the world and spawn a robot at (0,0).
Lastly you execute the trajectory by running the roslaunch command that runs the node which
will read the file: sln.txt. Note you must update the path or else it will not be able to find
the trajectory. Furthermore you will notice that it can call STLpredicate.py and obtain the
solution all at once. This works, but is not recommended unless you have a powerful
computer. 
